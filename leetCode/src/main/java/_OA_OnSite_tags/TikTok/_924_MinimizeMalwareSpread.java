package _OA_OnSite_tags.TikTok;

import java.util.Arrays;

class _924_MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        int[] size = uf.getSize();

        int[] idToMalwareCount = new int[n];
        for (int i : initial) {
            idToMalwareCount[uf.find(i)]++;
            // System.out.println(idToMalwareCount[uf.find(i)]);
        }
        // since init 0, 1 are the same of root -> 0, so the idToMalwareCount[uf.find(i)] => 2

        Arrays.sort(initial);

        int maxSize = 0, malwareInMaxSize = initial[0];
        for (int i : initial) {
            // Get number of malwares in i's locating component
            int rootI = uf.find(i);
            int malwareCount = idToMalwareCount[rootI];
            System.out.println("index of malware count: " + idToMalwareCount[rootI]);
            if (malwareCount == 1) {
                // Update overall max size of such componnet and malwareInMaxSize
                int sz = size[rootI];
                System.out.println("current root's rank: " + sz);
                if (sz > maxSize) {
                    maxSize = sz;
                    malwareInMaxSize = i;
                }
            }
        }

        return malwareInMaxSize;
    }

    class UF {
        private int[] parent;
        // private int[] rank;
        private int[] size;

        public UF(int n) {
            parent = new int[n];
            // rank = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                // rank[i] = 1;
                size[i] = 1;
            }
        }

        //time: O(log N)
        public int find(int x) {
            if (x == parent[x]) {
                return x;
            }
            return parent[x] = find(parent[x]);
        }

        // Union by Rank (depth)
//         public void union(int x, int y) {
//             int rootX = find(x);
//             int rootY = find(y);
//             if (rootX == rootY) return;

//             if (rank[x] > rank[y]) {
//                 parent[rootY] = rootX;
//             } else if (rank[x] < rank[y]) {
//                 parent[rootX] = rootY;
//             } else {
//                 parent[rootY] = rootX;
//                 rank[rootX] += 1;
//             }
//         }

        // 1: Union by Size (or Weight)
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX != rootY) {
                parent[rootY] = rootX; // Attach smaller tree under larger one
                size[rootX] += size[rootY]; // Update size of the new root
            }
        }

        public boolean isConnected(int x, int y) {
            return find(x) == find(y);
        }

        public int[] getSize() {
            return size;
        }
    }
}




















